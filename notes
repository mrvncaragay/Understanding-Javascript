Syntax Parsers
    -a program that reads your code and determines what it does and if its grammar is valid(syntax).
    -compilers or interpreters do the process/work reading the code character by character whether the code is valid.

Lexical Environments
    -where something sits physically in the code you write.
    -for instance, a function that has a variable 'var a' declared inside the function sits lexically inside
     the function.
    -if it does not find the variable it will go to the outer environment and it will try  to look for that variable

Execution Context (Global)
    -executed first
    -a wrapper to help manage the code that is running.
    -It creates a global object (window) and 'this' === global object

    creation (phase 1)
        -Setup memory space for Variables and Functions "Hoisting".
            -Variables are initialized with 'undefined' when variables are uninitialized.
            -Functions are initialized with all values set
    Execution (phase 2)
        -Runs your code line by line synchronously.

name/value pairs
    - address = "Eric"; address is the name and value is "Eric".

Object
    -A collection of name/value pairs.
    -a value can be Object and have name/value pairs

Global
    -Not inside a Function

undefined
    -A value that it has not been set. note: never set a variable to 'undefined'.

Single threaded
    -One command is being executed one at a time.

Synchronous
    -One line at a time

Function invocation '()'
    -Running/calling the function. invoke the function tell javascript to run the function.
    -every function invocation creates a new execution context.

The Execution stack
    -when a function is called/invoked a new execution context is created and put into the top of execution stack
    -The execution context that is on top is executed first.
    -When the execution context on top of the stack finishes it will pop off the stack.

Variables Environment
    -where the variables lives
    -Execution context has its own variables environment.

The Scope Chain
    -Every execution context has its outer environment 'Global Variable'
    -think lexically, if myVar is not declared inside its environment to outer environment (a).
    e.g function a() {
         function b() {
            console.log(myVar);
        }

        var myVar = 2;

    }

    -where Functions seats determine its outer environment.

Scope
    -Where a variable is available in your code.

Block
    - inside curly braces {}

Asynchronous
    -executes line of code one or more at a time.

Event Queue
    -e.g Click, http request
    -event queue is process when the execution stack is empty.

Dynamic Typing
    -You dont tell the engine what type of data a variable to hold, it figure it out while your code is running.
    -Variable can hold different types of value because it figures it our during execution.

Static Typing
    -you tell the engine/compiler a head of time exactly what type of data a variable can hold.
    -int myNum = "two"; //this is an error because "two" is a string and myNum is numeric.
    -var myNnum = "two"; //no error
    -myNum = false; //no error
    -myNum = 2; //no error

Primitive Type
    -A type of data represent a single value.
    -Object is not a primitive type because object store name/value pair.
    -Six types of primitive
        -String
            -sequence of characters '' or ""
        -Boolean
            -true or false
            -true == 1
            -false == 0
        -numeric (integers)
            -number
        -undefined
            -lack of existence (dont set variable to this)
        -Null
            -lack of existence (you can set variable to this)
        -Symbol

In-fix notation
    -An operator sits between the two parameters.

Pre-fix
    -The operator sits in the beginning of the two parameters.

Post-Fix
    -The operator sits in the end of the two parameters.

Operator Precedence
    -Which function gets called first (the higher the precedence wins)

Associativity
    -What operator function get called in first. from left ro right(left associativity) or right to left(right associativity).
    -https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence

-Coercion
    -Converting value from one type to another.
    -var myNum =  3 + '2'; //output: string '32'
    -//3 is coerce by the javascript engine into a string.
    -false = 0
    -true = 1
    -undefined = NaN
    -Null = 0
    -Null does not coerce to 0 when used in comparision '==', null == 0 //false
    -"" == 0 //true
    -"" == false //true

-Comparision operator (solved the coerce problem)
    - === (tripple equal)
        - it compares two things but it does not coerce the value.
    -https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness
    -|| or OR operator returns a value when one of the parameter is true or is a values.

-Object
    -collection of name/value pair
    -can have function and its name is methods
    -can also have object as property
    -dot '.' is used to access the object properties/methods.
    -in memory the base object has a reference to the address of these properties.
    - .. = new Object(); //create an object but not ideal
    -used bracket to create a properties [] or .
    -. operator is better than [] readability wise.

Object Literals
    -best way to create Object is using literals syntax {} preferred way to create an object
    -you can invoke a function and passing a object


JSON
    -JavaScript Object Notation
    -properties needs to be wrap in quotes
    -JSON.stringify(object) convert object to jason format
    -JSON.parse(string) convert json to javascript object
    -function is not allowed
    -requires quotes

First Class Function
    -everything you can do with other types  you can do with functions.
    -assign them to variables, pass them around, create them on the fly
    -functions are object
    -resides in the memory
    -can attached function to a properties or methods to a function because function is Object
    -you can attached it to primitive (name/value pair), object, function
    -two important properties
        -Name (can be anonymous, it does not to have a name)
        -Code
            -actual lines of code set (programmer wrote).
            -can be invoke or run using ()

Function Statements
    -do work
    -doest not return value
    -if statement for example

Function Expressions
    -a unit of code that results in a value. returns a value.
    -it does not have to save a value.
    -function expresion is not hoisted meaning it did not allocate memory when the code ran

By Value
    -reference a location in a memory.
    -If the value is primitive
        -a copy of that value is copied to the new variable.
        -the new value then has a new address which the new variable points to

By Reference
    -If the value is an Object and the new variable is set to that it
    -The new variable does not copy the Object, but instead points to the Object memory location.
    -understand that when using objects, all variables points to the same will get the same
     are going to see that change.

Mutate
    -To change something.
    -Immutable means it cant be changed.

this
    -every time a function is run javascript engine provide a variable called 'this'
    -In a case where a function is actually a method attached to an object the 'this' points
     to the object.
    -to points to the object memory location create a variable self and set it to this
    -var self = this

    -Javascript provide us a function to control what 'this' variable ends up being.
        -Call function
            -parameter: (object, ...the rest of arguments,..)
            -works the same way as evoking the function using ()
            -function.call(object, args1, args2...)
        -Apply function
            -same as call but instead of passing normal arguments
                -it wants an array of parameters
            -parameter: (object, [args1, args2, ...])

        -Bind function
            -parameter: object
            -function.bind(object)
            -returns a new copy of the function
            -'this' then knows where to point in this case the object that was passed.


Array
    -collection of many things (primitives, objects, functions)

Arguments
    -the parameters you pass to a function
    -arguments contains a list of all the values of all the parameters that you pass to a function.
    -you can partial parameter to a function and it will still run
    -it acts like an array, but it doesnt work like array

Spread parameter
    - function(...other)
    - the extra parameter that are passed are becomes 'other' array values
    - arguments is deprecated

Function Overloading
    -because of first class function. it allows us to create a function with default parameter
    -and calling other function.
    -see example.

Semi-Colon
    -It is optional tp put semi-colon at the end of the code.
    -It is important though to always put semi-colon to avoid unwanted result.
    -java engine puts semi-colon it it did not see it.

Whitespace
    -Invisible characters that create literal 'space' in your written code.


Immediately invoked function expressions (IIFE)
    -invoked function returns a value
    -the variable holds the variable is not a function but primitive (depends on the return value)
    -not setting a function to a variable is okay as long as you wrapped it with () parenthesis
    -IIFE also create a safe place for external source because
        -it creates its on execution context so the variable declared inside IIFE
        -will not collide with global variables or other code.

Closures
    -when a function is created and has a return value of function
      -when the base function execution context finish. the variable used still remains
      -in memory. when the child function is invoke. remember that it still have reference
      -to the base function (memory) variables. therefore the base variables can still be called or use.
    -The javascript engine makes  sure that when the function execution context is gone.
      -the rest of the function can still go down the scope chain and able to find the variables
      -used by the base function.
    -The base function variables is closed in with the child functions.

Functions Factories
    -Closures is used to creat dynamics functions

Closures and Callbacks
    -Closures/first class function/function expression

Callback function
    -A function you give to another function, to be run when the other function is finished.


Function Borrowing (using call, apply, and bind)
    -as long as the new object has the same properties as the object being referenced
    -the new object can use the referenced object methods with 'this'

Function Currying
    -creating a copy of a function but with some preset parameter.
    -it uses bind
    -if no parameters passed except 'this'. you can input the required parameters
    -function.bind(this, 3) - it sets the first parameter to 3 permanently.
    -this can be use to set a default parameter


